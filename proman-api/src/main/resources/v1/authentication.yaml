openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  description: >
    ## API of the Authentication Service


    This specification describes the endpoints, request/response model of the
    Authentication API. This API provides REST resources to authenticate and
    authorize users of Proman.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      https://proman.io/api/v1/
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Proman.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Proman reserves the right to add new parameters without further notice (in request and response).
      * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Proman reserves the right to enhance enumerations by new values.
      * Proman reserves the right to increase the "maxItem" settings of arrays without further notice.
      
    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    A user who is trying to login is a registered user whose authentication has to be validated before authorizing them with the right access.
    Once authenticated and authorized successfully, an access token in JWT standard is generated by the backend
    system containing following information of the logged in user:

      * header - meta information of generated access token
      * payload - claims information of authenticated user
      * signature - digital signature to verify that the token is not tampered along the way

    Read https://jwt.io/introduction/ for more information on JWT standard.

    ## Release Notes 

    ### 1.0.0

    * Initial version

servers:
  - url: https://proman.io/api/v1/auth
tags:
  - name: 'API#001 Authentication'
    description: >-
      All operations marked with 'API#001 Authentication' are relevant to user authentication use case
paths:
  /login:
    post:
      tags:
        - 'API#001 Authentication'
      operationId: login
      security:
        - Authorization: []
      summary: Authenticate and Authorize User
      description: >
        Each user logs into Proman application using their email address as username and password as credentials.
      parameters:
        - $ref: '#/components/parameters/ClientId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: OK - Authenticated successfully
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
            access-token:
              schema:
                type: string
              description: Generated access token (JWT) of successfully authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedUserResponse'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend

  /logout:
    post:
      tags:
        - 'API#001 Authentication'
      operationId: logout
      security:
        - Authorization: []
      summary: Logout the currently logged in user
      description: >
          Invalidate the current authenticated token
      parameters:
        - $ref: '#/components/parameters/ClientId'
        - $ref: '#/components/parameters/BearerAuthorization'
      responses:
        '200':
          description: OK - Logged out successfully
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
            access-token:
              schema:
                type: string
              description: Generated access token (JWT) of successfully authenticated user
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend

components:
  securitySchemes:
    BasicAuthorization:
      type: http
      scheme: basic
      description: >
        HTTP Basic Authentication is used for authentication. The server
        authentication credentials should be sent in the Authorization header.

        Basic authentication should only be used over HTTPS (SSL).


        The Authorization header is constructed as follows:


        - The username and password are combined into a string separated by a
        colon, e.g.: username:password

        - The resulting string is encoded using the RFC2045-MIME variant of
        Base64, except not limited to 76 char/line.

        - The authorization method and a space i.e. "Basic " is then put before
        the encoded string.


        ```

        POST https://proman.io/api/v1/authentication HTTP/1.1

        Authorization: Basic YW5kcmFwcF91czpqVEdhNUVKODR0

        ```
    BearerAuthorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves
        security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access
        to the bearer of this token.”

        The bearer token is a cryptic string, usually generated by the server in response to a login request. The
        client must send this token in the Authorization header when making requests to protected resources:

        ```
        Authorization: Bearer <token>

        ```

        Similarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).

        Read https://jwt.io/introduction/ for more information on JWT standard.

  parameters:
    ClientId:
      name: client-id
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API.
    Authorization:
      name: authorization
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory user credentials in Base64 encoded format. Refer to the #/components/securitySchemes
        for more information on this header.
    BearerAuthorization:
      name: authorization
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory user credentials in bearer http authentication scheme format. Refer to the #/components/securitySchemes
        for more information on this header.


  schemas:
    AuthorizedUserResponse:
      description: 'Object, which describes the successfully authenticated user details'
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the authorized user in a standard UUID format
        first_name:
          type: string
          description: first name of user
        last_name:
          type: string
          description: last name of user
        email_address:
          type: string
          description: email address of member
        mobile_phone:
          type: string
          description: mobile phone number of user
        status:
          description: 'The status of user (e.g. active, inactive, locked)'
          type: string
        last_login_time:
          description: The last login time of authorized user (time in milliseconds)
          type: object
        role:
          description: 'The role of user (e.g. Administrator, Project Manager, Team Leader, etc.)'
          type: object
          $ref: '#/components/schemas/RoleDetailsType'
      required:
        - id
        - first_name
        - last_name
        - email_address
        - mobile_phone
        - status
        - last_login_time
        - role
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        first_name: Proman
        last_name: Administrator
        email_address: proman.admin@proman.io
        mobile_number: +91 1234567890
        status: ACTIVE
        role:
          id: 100
          name: Administrator
          permissions:
            - id: 121
              name: Create User
            - id: 122
              name: Update User

    RoleDetailsType:
      type: object
      properties:
        id:
          type: integer
          description: Role id of authorized user
        name:
          type: string
          description: Role name of authorized user
        permissions:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PermissionsType'
          description: Permissions assigned to authorized user
      required:
        - id
        - name
        - permissions

    PermissionsType:
      type: object
      properties:
        id:
          type: integer
          description: Permission id of the user
        name:
          type: string
          description: Permission name of the user
      required:
        - id
        - name