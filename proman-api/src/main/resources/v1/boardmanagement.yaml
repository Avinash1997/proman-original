openapi: 3.0.0
info:
  title: Board Management API
  version: 1.0.0
  description: >
    ## API of Board Management Services


    This specification describes the endpoints, request/response model of the Board Management API.
    This API provides REST resources to manage project boards of Proman application.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      https://proman.io/api/v1/boards
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Proman.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Proman reserves the right to add new parameters without further notice (in request and response).
      * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Proman reserves the right to enhance enumerations by new values.
      * Proman reserves the right to increase the "maxItem" settings of arrays without further notice.
      
    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    Board Management APIs can only be called by authorized users who has rights with required permissions to manage boards. These APIs can be used to create new board,
    modify an existing board, map team to the board, add members (users) to the board, remove members (users) from the board, map workflow, mark board as completed, .
    The users once mapped to the board will have an access to board and tasks assigned to them.

    ## Release Notes 

    ### 1.0.0

    * Initial version

servers:
  - url: https://proman.io/api/v1/boards
tags:
  - name: 'API#004 Boards'
    description: >-
      All operations marked with 'API#004 Boards' are relevant to board management use case

paths:
  /boards:
    post:
      operationId: createBoard
      tags:
        - 'API#004 Boards'
      security:
        - Authorization: []
      summary: Board Management - Create new Board
      description: >
        API to create new board in Proman application
      parameters:
        - $ref: '#/components/parameters/ClientId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        description: Request containing new board details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardRequest'
      responses:
        '200':
          description: OK - Board has been created successfully
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBoardResponse'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '422':
          description: >-
            UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend

    get:
       operationId: getBoards
       tags:
         - 'API#004 Boards'
       security:
         - Authorization: []
       summary: Board Management - Get all Boards
       description: >
         API to get all boards of Proman application
       parameters:
         - $ref: '#/components/parameters/ClientId'
         - $ref: '#/components/parameters/Authorization'
         - in: query
           name: offset
           schema:
             type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           schema:
             type: integer
           required: false
           description: query to limit the number of records per fetch
         - in: query
           name: role
           schema:
             type: integer
           required: false
           description: query to filter the results based on specified role
         - in: query
           name: status
           schema:
             type: string
             enum: [OPEN, IN PROGRESS, COMPLETED]
           required: false
           description: query to filter the results based on specified status
       responses:
         '200':
           description: OK - Fetched all boards
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BoardsResponse'
         '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a
              client error (e.g., malformed request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '403':
            description: >-
              FORBIDDEN - request has not been applied because client application has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '404':
            description: >-
              NOT FOUND -  Board (resource) does not exist
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
         '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend

  /boards/{id}:
     get:
        operationId: getBoard
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Get an existing Board
        description: >
            API to get an existing Board detalis of Proman application
        parameters:
         - $ref: '#/components/parameters/BoardId'
         - $ref: '#/components/parameters/ClientId'
         - $ref: '#/components/parameters/Authorization'
        responses:
         '200':
           description: OK - Fetched board details
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BoardDetailsResponse'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Board (resource) does not exist
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
     put:
        operationId: updateBoard
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Update an existing Board
        description: >
            API to update an existing board details in Proman application
        parameters:
          - $ref: '#/components/parameters/BoardId'
          - $ref: '#/components/parameters/ClientId'
          - $ref: '#/components/parameters/Authorization'
        requestBody:
          description: Request containing modified board details
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoardRequest'
        responses:
          '200':
            description: OK - Board has been updated successfully
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to
              something that is perceived to be a client error (e.g., malformed
              request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '403':
            description: >-
              FORBIDDEN - request has not been applied because client application
              has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '404':
            description: >-
              NOT FOUND - Board (resource) does not exist
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition
              that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
     patch:
        operationId: updateBoardStatus
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Update status of an existing Board
        description: >
            API to update status of an existing board in Proman application
        parameters:
          - $ref: '#/components/parameters/BoardId'
          - $ref: '#/components/parameters/ClientId'
          - $ref: '#/components/parameters/Authorization'
        requestBody:
          description: Request containing modified status
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoardStatusRequest'
        responses:
          '200':
            description: OK - Board status has been updated successfully
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to
              something that is perceived to be a client error (e.g., malformed
              request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '403':
            description: >-
              FORBIDDEN - request has not been applied because client application
              has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '404':
            description: >-
              NOT FOUND - Board (resource) does not exist
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition
              that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
  /boards/{id}/members:
     get:
        operationId: getBoardMembers
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - List members of Board
        description: >
            API to get an existing members of the Board
        parameters:
         - $ref: '#/components/parameters/BoardId'
         - $ref: '#/components/parameters/ClientId'
         - $ref: '#/components/parameters/Authorization'
        responses:
         '200':
           description: OK - Fetched details of board members
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BoardMembersSummaryResponse'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Board (resource) does not exist
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend

components:

  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves
        security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access
        to the bearer of this token.”

        The bearer token is a cryptic string, usually generated by the server in response to a login request. The
        client must send this token in the Authorization header when making requests to protected resources:

        ```
        Authorization: Bearer <token>

        ```

        Similarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).

        Read https://jwt.io/introduction/ for more information on JWT standard.

  parameters:
    ClientId:
      name: client-id
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API.
    Authorization:
      name: authorization
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory user credentials in bearer http authentication scheme format. Refer to the #/components/securitySchemes
        for more information on this header.
    BoardId:
      name: id
      schema:
        type: string
        format: uuid
      in: path
      required: true
      description: >-
        Unique identifier of Board in a standard UUID format

  schemas:

    BoardsResponse:
      type: object
      properties:
        offset:
          type: integer
          description: offset or position of the fetched boards
        limit:
          type: integer
          description: number of boards fetched per this request
        total_count:
          type: integer
          description: total number of boards for the specified input
        boards:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/BoardSummaryResponse'
          description: List of boards
      required:
        - offset
        - limit
        - total_count
        - boards
      example:
        offset: 1
        limit: 10
        total_count: 33
        boards:
          - id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
            name: Build Prototype
            owner:
              id: 8d274a25-ca31-45a8-85b4-b06ffc9d5f8f
              first_name: Project
              last_name: Manager
            start_date: 2018-05-07
            end_date: 2018-05-10
            workflow:
              id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
              name: Kanban
            status: ACTIVE

          - id: 8d174a25-da31-55a8-85b4-c06ffc9d5f8f
            name: Implement API
            owner:
              id: 8d274a25-ca31-45a8-85b4-b06ffc9d5f8f
              first_name: Project
              last_name: Manager
            start_date: 2018-07-01
            end_date: 2018-10-12
            workflow:
              id: 2d174a25-fa31-45a8-85b4-b07ffc9d5f8d
              name: Custom Scrum
            status: ACTIVE

    BoardSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the board in a standard UUID format
        name:
          type: string
          description: Name of the board
        owner:
          type: object
          description: Name of the board owner
          $ref: '#/components/schemas/BoardOwnerSummaryResponse'
        start_date:
          type: object
          description: Start date of the board
          $ref: '#/components/schemas/FullDateType'
        end_date:
          type: object
          description: End date of the board
          $ref: '#/components/schemas/FullDateType'
        workflow:
          type: object
          description: Workflow of the Board
          $ref: '#/components/schemas/BoardWorkflowSummaryResponse'
        status:
          type: string
          description: Status of the board
          $ref: '#/components/schemas/BoardStatusType'
      required:
        - id
        - name
        - owner
        - start_date
        - end_date
        - workflow
        - status
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        name: Build Prototype
        owner:
          id: 8d274a25-ca31-45a8-85b4-b06ffc9d5f8f
          first_name: Project
          last_name: Manager
        start_date: 2018-05-07
        end_date: 2018-05-10
        workflow:
          id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          name: Kanban
        status: ACTIVE

    BoardDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the board in a standard UUID format
        name:
          type: string
          description: Name of the board
        owner:
          type: object
          description: Details of the board owner
          $ref: '#/components/schemas/BoardOwnerDetailsResponse'
        start_date:
          type: object
          description: Start date of the board
          $ref: '#/components/schemas/FullDateType'
        end_date:
          type: object
          description: End date of the board
          $ref: '#/components/schemas/FullDateType'
        workflow:
          type: object
          description: Workflow of the Board
          $ref: '#/components/schemas/BoardWorkflowDetailsResponse'
        status:
          type: object
          description: Status of the board
          $ref: '#/components/schemas/BoardStatusType'
        total_members:
          type: integer
          description: Total number of members (users) in the board
      required:
        - id
        - name
        - owner
        - start_date
        - end_date
        - workflow
        - status
        - total_members
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        name: Build Prototype
        owner:
          id: 8d274a25-ca31-45a8-85b4-b06ffc9d5f8f
          first_name: Project
          last_name: Manager
          email_address: project.manager@proman.io
          role:
            id: 200
            name: Project Manager
        start_date: 2018-05-07
        end_date: 2018-05-10
        workflow:
          id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          name: Kanban
        status: ACTIVE
        total_members: 8

    BoardOwnerSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the owner (user) in a standard UUID format generated by API backend
        first_name:
          type: string
          description: First name of the owner (user)
        last_name:
          type: string
          description: Last name of the owner (user)
      required:
        - id
        - first_name
        - last_name

    BoardOwnerDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the owner (user) in a standard UUID format generated by API backend
        first_name:
          type: string
          description: First name of the owner (user)
        last_name:
          type: string
          description: Last name of the owner (user)
        email_address:
          type: string
          description: Email address of the owner (user)
        role:
          type: object
          description: Role mapped to the owner (user)
          $ref: '#/components/schemas/RoleSummaryResponse'
      required:
        - id
        - first_name
        - last_name
        - email_address
        - role

    RoleSummaryResponse:
      type: object
      properties:
        id:
          type: integer
          description: Role id of the owner (user)
        name:
          type: string
          description: Role name of the owner (user)
      required:
        - id
        - name

    BoardMembersSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the board member in a standard UUID format generated by API backend
        name:
          type: string
          description: Name of the workflow
      required:
        - id
        - name

    BoardWorkflowSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the workflow in a standard UUID format generated by API backend
        name:
          type: string
          description: Name of the workflow
      required:
        - id
        - name
    BoardWorkflowDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the workflow in a standard UUID format generated by API backend
        name:
          type: string
          description: Name of the workflow
        activities:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/BoardWorkflowActivityResponse'
          description: List of activities that this workflow has
      required:
        - id
        - name
        - activities

    BoardWorkflowActivityResponse:
      type: object
      properties:
        type:
          type: string
          description: Name of the workflow activity
        description:
          type: string
          description: Description of the workflow activity

    CreateBoardRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the new board
        start_date:
          type: object
          description: Start date of the board
          $ref: '#/components/schemas/FullDateType'
        end_date:
          type: object
          description: End date of the board
          $ref: '#/components/schemas/FullDateType'
        workflow_id:
          type: string
          description: Workflow reference identifier
      required:
        - name
        - start_date
        - end_date
        - workflow_id
      example:
        name: Build Prototype
        start_date: 2018-05-07
        end_date: 2018-05-10
        workflow_id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f

    CreateBoardResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier in a standard UUID format generated by API backend
        status:
          type: object
          description: Status of the board
          $ref: '#/components/schemas/BoardStatusType'
      required:
        - id
        - status
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        status: OPEN

    UpdateBoardRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the new board
        start_date:
          type: object
          description: Start date of the board
          $ref: '#/components/schemas/FullDateType'
        end_date:
          type: object
          description: End date of the board
          $ref: '#/components/schemas/FullDateType'
        workflow_id:
          type: string
          description: Workflow reference identifier
      required:
        - name
        - start_date
        - end_date
        - workflow_id
      example:
        name: Build Prototype
        start_date: 2018-05-07
        end_date: 2018-06-10
        workflow_id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f

    UpdateBoardStatusRequest:
      type: object
      properties:
        status:
          type: object
          description: Updated status of the board
          $ref: '#/components/schemas/BoardStatusType'
      example:
        status: COMPLETED

    BoardStatusType:
      type: string
      enum: [OPEN, IN PROGRESS, COMPLETED]
      description: Status of the board

    FullDateType:
      type: string
      format: full-date
      description: Full date format

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Application specific standard error code
        message:
          type: string
          description: Error message stating the reason
      required:
        - code
        - message
      example:
        code: BRD-001
        message: Board with name already exist