openapi: 3.0.0
info:
  title: User Registration API
  version: 1.0.0
  description: >
    ## API of User Registration Service


    This specification describes the endpoints, request/response model of the
    User Registration API. This API provides REST resources to register users in Proman application.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      https://proman.io/api/v1/register
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Proman.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Proman reserves the right to add new parameters without further notice (in request and response).
      * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Proman reserves the right to enhance enumerations by new values.
      * Proman reserves the right to increase the "maxItem" settings of arrays without further notice.
      
    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    A user who is trying to register should provide the required inputs including email address in order to be registered successfully in Proman application.
    After the registration, user will remain in REGISTERED status and cannot access Proman application. Once approved by an administrator, user will turn to
    ACTIVE status and can start accessing Proman application.


    ### Note: Proman application supports HTTPS only scheme. All requests are sent in a secured and encrypted manner and hence the password
    is never sent in a text/plain format.

    ### Password Policy:

      * Minimum of 8 character length

      * Should contain alphabets with at least one special character and one number

      * Allowed special characters are # $ @ _ - !

    ## Release Notes 

    ### 1.0.0

    * Initial version

servers:
  - url: https://proman.io/api/v1/register
tags:
  - name: 'API#002 Register'
    description: >-
      All operations marked with 'API#002 Register' are relevant to user registration use case
paths:
  /register:
    x-swagger-router-controller: api
    post:
      tags:
        - 'API#002 Register'
      operationId: registerUser
      security:
        - Authorization: []
      summary: Register User
      description: >
        Each user who needs access to Proman application should register using their valid email address and
        set a password for an authorized access.
      requestBody:
        description: Request containing user registration information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      parameters:
        - $ref: '#/components/parameters/ClientId'
      responses:
        '200':
          description: OK - User has been registered successfully
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '422':
          description: >-
            UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request flow to the backend
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
components:
  parameters:
    ClientId:
      name: client-id
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API.

  schemas:
    RegisterUserRequest:
      type: object
      properties:
        first_name:
          type: string
          description: First name of the new user
        last_name:
          type: string
          description: Last name of the new user
        email_address:
          type: string
          description: Email address of the new user
        password:
          type: string
          description: Password of the new user
        mobile_number:
          type: string
          description: Mobile number of the new user
      required:
        - first_name
        - last_name
        - email_address
      example:
        first_name: Proman
        last_name: Administrator
        email_address: proman.admin@proman.io
        password: Pr0m@n@dm1nu$er
        mobile_number: +91 1234567890
    RegisterUserResponse:
      type: object
      properties:
        id:
          type: string
          description: User identifier in a standard UUID format generated by API backend
        status:
          type: string
          description: Status of registered user (ACTIVE, REGISTERED, INACTIVE, LOCKED)
      required:
        - id
        - status
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        status: REGISTERED