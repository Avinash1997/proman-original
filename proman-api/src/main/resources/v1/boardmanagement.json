{
   "swagger": "2.0",
   "info": {
      "title": "Board Management API",
      "version": "1.0.0",
      "description": "## API of Board Management Services\n\nThis specification describes the endpoints, request/response model of the Board Management API. This API provides REST resources to manage project boards of Proman application.\n\nThe resources should only be used over HTTPS (SSL) and can be accessed via the following base URL: https://proman.io/api/v1/\n## API usage guidelines\n\nThis section describes general rules and guidelines for using REST based services offered by Proman.\n  * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.\n  * Proman reserves the right to add new parameters without further notice (in request and response).\n  * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.\n  * Proman reserves the right to enhance enumerations by new values.\n  * Proman reserves the right to increase the \"maxItem\" settings of arrays without further notice.\n  \nEach consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))\n\n## Business definitions\nBoard Management APIs can only be called by authorized users who has rights with required permissions to manage boards. These APIs can be used to create new board, modify an existing board, map team to the board, add members (users) to the board, remove members (users) from the board, map workflow, mark board as completed, . The users once mapped to the board will have an access to board and tasks assigned to them.\n## Release Notes\n### 1.0.0\n* Initial version\n"
   },
   "host": "proman.io",
   "schemes": [
      "http",
      "https"
   ],
   "basePath": "/api/v1/boards",
   "tags": [
      {
         "name": "API#004 Boards",
         "description": "All operations marked with 'API#004 Boards' are relevant to board management use case"
      }
   ],
   "paths": {
      "/boards": {
         "post": {
            "operationId": "createBoard",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Create new Board",
            "description": "API to create new board in Proman application\n",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "CreateBoardRequest",
                  "description": "Request containing new board details",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateBoardRequest"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "CREATED - Board has been created successfully",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     },
                     "location": {
                        "type": "string",
                        "description": "Location of the new resource which was created by this request"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/CreateBoardResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "get": {
            "operationId": "getBoards",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Get all Boards",
            "description": "API to get all boards of Proman application\n",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "query",
                  "name": "offset",
                  "type": "integer",
                  "required": false,
                  "description": "query to set the position of the records to be fetched from"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "type": "integer",
                  "required": false,
                  "description": "query to limit the number of records per fetch"
               },
               {
                  "in": "query",
                  "name": "role",
                  "type": "integer",
                  "required": false,
                  "description": "query to filter the results based on specified role"
               },
               {
                  "in": "query",
                  "name": "status",
                  "type": "string",
                  "enum": [
                     "OPEN",
                     "IN PROGRESS",
                     "COMPLETED"
                  ],
                  "required": false,
                  "description": "query to filter the results based on specified status"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Fetched all boards",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/BoardsSummaryResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         }
      },
      "/boards/{id}": {
         "get": {
            "operationId": "getBoard",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Get an existing Board",
            "description": "API to get an existing Board detalis of Proman application\n",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Fetched board details",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/BoardDetailsResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND - Board (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "put": {
            "operationId": "updateBoard",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Update an existing Board",
            "description": "API to update an existing board details in Proman application\n",
            "consumes": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "UpdateBoardRequest",
                  "description": "Request containing modified board details",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateBoardRequest"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Board has been updated successfully",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND - Board (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "patch": {
            "operationId": "patchBoard",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Partial update of an existing Board",
            "description": "API to partial update of an existing board in Proman application\n",
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "BoardOperationsRequest",
                  "description": "Request containing modified status of board",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/BoardOperationsRequest"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Board has been partially updated",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND - Board (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         }
      },
      "/boards/{id}/members": {
         "get": {
            "operationId": "getBoardMembers",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - List of members belonging to the Board",
            "description": "API to get an existing members of the Board\n",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Fetched list of board members",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/BoardMembersSummaryResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         }
      },
      "/boards/{id}/tasks": {
         "get": {
            "operationId": "getBoardTasks",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - List of tasks belonging to the Board",
            "description": "API to get an existing tasks of the Board\n",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Fetched list of tasks belonging to the board",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/BoardTasksSummaryResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "post": {
            "operationId": "addBoardTask",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Add task to the Board",
            "description": "API to add existing members to the Board\n",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "CreateBoardTaskRequest",
                  "description": "Request containing members to be added to the board",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateBoardTaskRequest"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "CREATED - Task has been created successfully in the board",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     },
                     "location": {
                        "type": "string",
                        "description": "Location of the new resource which was created by this request"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/CreateBoardTaskResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         }
      },
      "/boards/{id}/tasks/{task_id}": {
         "get": {
            "operationId": "getBoardTaskDetails",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Task details belonging to the Board",
            "description": "API to get details of an existing task in the Board\n",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/TaskId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Fetched details of the task belonging to the board",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/BoardTaskDetailsResponse"
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND -  Task (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "put": {
            "operationId": "updateBoardTask",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Update an existing task in the board",
            "description": "API to update an existing task details in the board\n",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/TaskId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "UpdateBoardTaskRequest",
                  "description": "Request containing modified task details",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateBoardTaskRequest"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Task has been updated successfully",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND - Task (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         },
         "patch": {
            "operationId": "patchBoardTask",
            "tags": [
               "API#004 Boards"
            ],
            "security": [
               {
                  "Authorization": []
               }
            ],
            "summary": "Board Management - Partial update of an existing task belonging to the Board",
            "description": "API to partial update of an existing task in the board of Proman application\n",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "$ref": "#/parameters/BoardId"
               },
               {
                  "$ref": "#/parameters/TaskId"
               },
               {
                  "$ref": "#/parameters/ClientId"
               },
               {
                  "$ref": "#/parameters/Authorization"
               },
               {
                  "in": "body",
                  "name": "BoardTaskOperationsRequest",
                  "description": "Request containing modified status of board task",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/BoardTaskOperationsRequest"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK - Task has been partially updated",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "400": {
                  "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "401": {
                  "description": "UNAUTHORIZED - user has provided wrong credentials",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "403": {
                  "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "404": {
                  "description": "NOT FOUND - Task (resource) does not exist",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               },
               "422": {
                  "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  },
                  "schema": {
                     "$ref": "#/definitions/ErrorResponse"
                  }
               },
               "500": {
                  "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
                  "headers": {
                     "request-id": {
                        "type": "string",
                        "description": "Used as correlation id while tracing for the request in the backend"
                     }
                  }
               }
            }
         }
      }
   },
   "securityDefinitions": {
      "Authorization": {
         "type": "basic",
         "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
      }
   },
   "parameters": {
      "ClientId": {
         "name": "client-id",
         "type": "string",
         "in": "header",
         "required": true,
         "description": "Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API."
      },
      "Authorization": {
         "name": "authorization",
         "type": "string",
         "in": "header",
         "required": true,
         "description": "Mandatory user credentials in bearer http authentication scheme format. Refer to the #/securityDefinitions for more information on this header."
      },
      "BoardId": {
         "name": "id",
         "type": "string",
         "format": "uuid",
         "in": "path",
         "required": true,
         "description": "Unique identifier of Board in a standard UUID format"
      },
      "TaskId": {
         "name": "task_id",
         "type": "string",
         "format": "uuid",
         "in": "path",
         "required": true,
         "description": "Unique identifier of Task in a standard UUID format"
      }
   },
   "definitions": {
      "BoardsSummaryResponse": {
         "type": "object",
         "properties": {
            "offset": {
               "type": "integer",
               "description": "offset or position of the fetched boards"
            },
            "limit": {
               "type": "integer",
               "description": "number of boards fetched per this request"
            },
            "total_count": {
               "type": "integer",
               "description": "total number of boards in the database"
            },
            "boards": {
               "type": "array",
               "items": {
                  "type": "object",
                  "$ref": "#/definitions/BoardsSummaryType"
               },
               "description": "List of boards"
            }
         },
         "required": [
            "offset",
            "limit",
            "total_count",
            "boards"
         ],
         "example": {
            "offset": 1,
            "limit": 10,
            "total_count": 33,
            "boards": [
               {
                  "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
                  "name": "Build Prototype",
                  "owner": {
                     "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
                     "first_name": "Project",
                     "last_name": "Manager"
                  },
                  "start_date": "2018-05-07T00:00:00.000Z",
                  "end_date": "2018-05-10T00:00:00.000Z",
                  "workflow": {
                     "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
                     "name": "Kanban"
                  },
                  "status": "ACTIVE"
               },
               {
                  "id": "8d174a25-da31-55a8-85b4-c06ffc9d5f8f",
                  "name": "Implement API",
                  "owner": {
                     "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
                     "first_name": "Project",
                     "last_name": "Manager"
                  },
                  "start_date": "2018-07-01T00:00:00.000Z",
                  "end_date": "2018-10-12T00:00:00.000Z",
                  "workflow": {
                     "id": "2d174a25-fa31-45a8-85b4-b07ffc9d5f8d",
                     "name": "Custom Scrum"
                  },
                  "status": "ACTIVE"
               }
            ]
         }
      },
      "BoardsSummaryType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board in a standard UUID format"
            },
            "name": {
               "type": "string",
               "description": "Name of the board"
            },
            "owner": {
               "type": "object",
               "description": "Name of the board owner",
               "$ref": "#/definitions/BoardOwnerType"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "workflow": {
               "type": "object",
               "description": "Workflow of the Board",
               "$ref": "#/definitions/BoardWorkflowType"
            },
            "status": {
               "$ref": "#/definitions/BoardStatusType"
            }
         },
         "required": [
            "id",
            "name",
            "owner",
            "start_date",
            "end_date",
            "workflow",
            "status"
         ],
         "example": {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "name": "Build Prototype",
            "owner": {
               "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
               "first_name": "Project",
               "last_name": "Manager"
            },
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "workflow": {
               "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
               "name": "Kanban"
            },
            "status": "ACTIVE"
         }
      },
      "BoardDetailsResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board in a standard UUID format"
            },
            "name": {
               "type": "string",
               "description": "Name of the board"
            },
            "owner": {
               "type": "object",
               "description": "Details of the board owner",
               "$ref": "#/definitions/BoardOwnerDetailsType"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "workflow": {
               "type": "object",
               "description": "Workflow of the Board",
               "$ref": "#/definitions/BoardWorkflowDetailsType"
            },
            "status": {
               "$ref": "#/definitions/BoardStatusType"
            },
            "total_members": {
               "type": "integer",
               "description": "Total number of members (users) in the board"
            }
         },
         "required": [
            "id",
            "name",
            "owner",
            "start_date",
            "end_date",
            "workflow",
            "status",
            "total_members"
         ],
         "example": {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "name": "Build Prototype",
            "owner": {
               "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
               "first_name": "Project",
               "last_name": "Manager",
               "email_address": "project.manager@proman.io",
               "role": {
                  "id": 200,
                  "name": "Project Manager"
               }
            },
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "workflow": {
               "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
               "name": "Kanban"
            },
            "status": "ACTIVE",
            "total_members": 8
         }
      },
      "BoardOwnerType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the owner (user) in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the owner (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the owner (user)"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name"
         ]
      },
      "BoardOwnerDetailsType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the owner (user) in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the owner (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the owner (user)"
            },
            "email_address": {
               "type": "string",
               "description": "Email address of the owner (user)"
            },
            "role": {
               "$ref": "#/definitions/RoleType"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name",
            "email_address",
            "role"
         ]
      },
      "RoleType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "integer",
               "description": "Role id of the owner (user)"
            },
            "name": {
               "type": "string",
               "description": "Role name of the owner (user)"
            }
         },
         "required": [
            "id",
            "name"
         ]
      },
      "BoardMembersSummaryResponse": {
         "type": "object",
         "properties": {
            "offset": {
               "type": "integer",
               "description": "offset or position of the fetched members"
            },
            "limit": {
               "type": "integer",
               "description": "number of members fetched per this request"
            },
            "total_count": {
               "type": "integer",
               "description": "total number of members in the database"
            },
            "members": {
               "type": "array",
               "items": {
                  "type": "object",
                  "$ref": "#/definitions/BoardMembersResponse"
               },
               "description": "List of members"
            }
         },
         "required": [
            "offset",
            "limit",
            "total_count",
            "members"
         ],
         "example": {
            "offset": 1,
            "limit": 10,
            "total_count": 8,
            "members": [
               {
                  "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
                  "first_name": "Project",
                  "last_name": "Manager",
                  "email_address": "project.manager@proman.io",
                  "role": {
                     "id": 200,
                     "name": "Project Manager"
                  },
                  "status": "ACTIVE"
               },
               {
                  "id": "8d174a25-da31-55a8-85b4-c06ffc9d5f8f",
                  "first_name": "Team",
                  "last_name": "Leader",
                  "email_address": "team.leader@proman.io",
                  "role": {
                     "id": 200,
                     "name": "Team Leader"
                  },
                  "status": "LOCKED"
               }
            ]
         }
      },
      "BoardMembersResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board member in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the member (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the member (user)"
            },
            "email_address": {
               "type": "string",
               "description": "Email address of the member (user)"
            },
            "role": {
               "$ref": "#/definitions/RoleType"
            },
            "status": {
               "$ref": "#/definitions/MemberStatusType"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name",
            "email_address",
            "role",
            "status"
         ]
      },
      "BoardOperationsRequest": {
         "type": "array",
         "items": {
            "$ref": "#/definitions/BoardOperationRequest"
         }
      },
      "BoardOperationRequest": {
         "type": "object",
         "properties": {
            "op": {
               "type": "string",
               "description": "Type of operation",
               "enum": [
                  "replace",
                  "add",
                  "remove"
               ]
            },
            "path": {
               "type": "string",
               "description": "Resource path whose state to be modified",
               "enum": [
                  "status",
                  "members"
               ]
            },
            "value": {
               "type": "string",
               "description": "New state value to be updated to the resource"
            }
         },
         "example": [
            {
               "op": "replace",
               "path": "status",
               "value": "COMPLETED"
            },
            {
               "op": "add",
               "path": "members",
               "value": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f"
            },
            {
               "op": "remove",
               "path": "members",
               "value": "3d274a27-da31-25a8-55b4-c06ffc9d5f3e"
            }
         ]
      },
      "BoardTaskOperationsRequest": {
         "type": "array",
         "items": {
            "$ref": "#/definitions/BoardTaskOperationRequest"
         }
      },
      "BoardTaskOperationRequest": {
         "type": "object",
         "properties": {
            "op": {
               "type": "string",
               "description": "Type of operation",
               "enum": [
                  "replace",
                  "add",
                  "remove"
               ]
            },
            "path": {
               "type": "string",
               "description": "Resource path whose state to be modified",
               "enum": [
                  "phase",
                  "status",
                  "owner",
                  "effort"
               ]
            },
            "value": {
               "type": "string",
               "description": "New state value to be updated to the resource"
            }
         },
         "example": [
            {
               "op": "replace",
               "path": "phase",
               "value": "TODO"
            },
            {
               "op": "replace",
               "path": "status",
               "value": "REOPENED"
            },
            {
               "op": "add",
               "path": "effort",
               "value": 3600
            }
         ]
      },
      "BoardTasksSummaryResponse": {
         "type": "object",
         "properties": {
            "offset": {
               "type": "integer",
               "description": "offset or position of the fetched tasks"
            },
            "limit": {
               "type": "integer",
               "description": "number of tasks fetched per this request"
            },
            "total_count": {
               "type": "integer",
               "description": "total number of tasks in the database"
            },
            "tasks": {
               "type": "array",
               "items": {
                  "type": "object",
                  "$ref": "#/definitions/BoardTasksResponse"
               },
               "description": "List of tasks"
            }
         },
         "required": [
            "offset",
            "limit",
            "total_count",
            "tasks"
         ],
         "example": {
            "offset": 1,
            "limit": 10,
            "total_count": 8,
            "tasks": [
               {
                  "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
                  "name": "Analysis and Design",
                  "description": "Analyse on the technical feasibility and work on design spec",
                  "phase_type": "TODO",
                  "owner": {
                     "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
                     "first_name": "Technical",
                     "last_name": "Lead"
                  },
                  "progress": 25,
                  "status": "IN PROGRESS"
               },
               {
                  "id": "8d174a25-da31-55a8-85b4-c06ffc9d5f8f",
                  "name": "Implement Code",
                  "description": "Write backend code",
                  "phase_type": "TODO",
                  "owner": {
                     "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
                     "first_name": "Senior",
                     "last_name": "Developer"
                  },
                  "progress": 0,
                  "status": "REOPENED"
               }
            ]
         }
      },
      "BoardTasksResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board member in a standard UUID format generated by API backend"
            },
            "name": {
               "type": "string",
               "description": "Name of the task"
            },
            "description": {
               "type": "string",
               "description": "Description of the task"
            },
            "phase_type": {
               "type": "string",
               "description": "Workflow phase that this task is currently in"
            },
            "owner": {
               "type": "object",
               "description": "Owner (user) of this task",
               "$ref": "#/definitions/TaskOwnerType"
            },
            "progress": {
               "type": "integer",
               "description": "Progress of this task (in percentage)"
            },
            "status": {
               "$ref": "#/definitions/TaskStatusType"
            }
         },
         "required": [
            "id",
            "name",
            "description",
            "phase_type",
            "owner",
            "progress",
            "status"
         ]
      },
      "TaskOwnerType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the owner (user) in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the owner (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the owner (user)"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name"
         ]
      },
      "BoardTaskDetailsResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board task in a standard UUID format generated by API backend"
            },
            "name": {
               "type": "string",
               "description": "Name of the task"
            },
            "description": {
               "type": "string",
               "description": "Description of the task"
            },
            "phase_type": {
               "type": "string",
               "description": "Workflow phase that this task is currently in"
            },
            "owner": {
               "type": "object",
               "description": "Owner (user) of this task",
               "$ref": "#/definitions/TaskOwnerDetailsType"
            },
            "status": {
               "$ref": "#/definitions/TaskStatusType"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "original_effort": {
               "type": "integer",
               "description": "Estimated effort (in seconds) for this task"
            },
            "logged_effort": {
               "type": "integer",
               "description": "Logged effort (in seconds) for this task"
            },
            "remaining_effort": {
               "type": "integer",
               "description": "Remaining effort (in seconds) for this task"
            },
            "watchers": {
               "type": "array",
               "description": "List of watchers of this task",
               "$ref": "#/definitions/TaskWatcherType"
            }
         },
         "required": [
            "id",
            "name",
            "description",
            "phase_type",
            "owner",
            "status",
            "start_date",
            "original_effort",
            "logged_effort",
            "remaining_effort",
            "watchers"
         ],
         "example": {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "name": "Analysis and Design",
            "description": "Analyse on the technical feasibility and work on design spec",
            "phase_type": "TODO",
            "owner": {
               "id": "8d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
               "first_name": "Technical",
               "last_name": "Lead",
               "email_address": "technical.lead@proman.io"
            },
            "status": "IN PROGRESS",
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "original_effort": 10800,
            "logged_effort": 7200,
            "remaining_effort": 3600,
            "watchers": [
               {
                  "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
                  "first_name": "Project",
                  "last_name": "Manager"
               },
               {
                  "id": "8d174a35-ca31-35a8-87b4-f06ffc9d5f8d",
                  "first_name": "Team",
                  "last_name": "Lead"
               }
            ]
         }
      },
      "TaskOwnerDetailsType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the owner (user) in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the owner (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the owner (user)"
            },
            "email_address": {
               "type": "string",
               "description": "Email address of the owner (user)"
            },
            "role": {
               "$ref": "#/definitions/RoleType"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name",
            "email_address",
            "role"
         ]
      },
      "TaskWatcherType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the owner (user) in a standard UUID format generated by API backend"
            },
            "first_name": {
               "type": "string",
               "description": "First name of the owner (user)"
            },
            "last_name": {
               "type": "string",
               "description": "Last name of the owner (user)"
            }
         },
         "required": [
            "id",
            "first_name",
            "last_name"
         ]
      },
      "TaskWatchersType": {
         "type": "array",
         "items": {
            "type": "string",
            "description": "List of memeber ids who are the watchers of this task"
         }
      },
      "BoardWorkflowType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the workflow in a standard UUID format generated by API backend"
            },
            "name": {
               "type": "string",
               "description": "Name of the workflow"
            }
         },
         "required": [
            "id",
            "name"
         ]
      },
      "BoardWorkflowDetailsType": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the workflow in a standard UUID format generated by API backend"
            },
            "name": {
               "type": "string",
               "description": "Name of the workflow"
            },
            "phases": {
               "type": "array",
               "items": {
                  "type": "object",
                  "$ref": "#/definitions/BoardWorkflowPhaseType"
               },
               "description": "List of phases that this workflow has"
            }
         },
         "required": [
            "id",
            "name",
            "phases"
         ]
      },
      "BoardWorkflowPhaseType": {
         "type": "object",
         "properties": {
            "type": {
               "type": "string",
               "description": "Name of the workflow phase"
            },
            "description": {
               "type": "string",
               "description": "Description of the workflow phase"
            }
         }
      },
      "CreateBoardRequest": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the new board"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "workflow_id": {
               "type": "string",
               "description": "Workflow reference identifier"
            }
         },
         "required": [
            "name",
            "start_date",
            "end_date",
            "workflow_id"
         ],
         "example": {
            "name": "Build Prototype",
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "workflow_id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f"
         }
      },
      "CreateBoardResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier in a standard UUID format generated by API backend"
            },
            "status": {
               "$ref": "#/definitions/BoardStatusType"
            }
         },
         "required": [
            "id",
            "status"
         ],
         "example": {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "status": "OPEN"
         }
      },
      "UpdateBoardRequest": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the new board"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "workflow_id": {
               "type": "string",
               "description": "Workflow reference identifier"
            }
         },
         "required": [
            "name",
            "start_date",
            "end_date",
            "workflow_id"
         ],
         "example": {
            "name": "Build Prototype",
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-06-10T00:00:00.000Z",
            "workflow_id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f"
         }
      },
      "CreateBoardTaskRequest": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the task"
            },
            "description": {
               "type": "string",
               "description": "Description of the task"
            },
            "phase_type": {
               "type": "string",
               "description": "Workflow phase that this task will be set with"
            },
            "owner_id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board task owner in a standard UUID format"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "original_effort": {
               "type": "integer",
               "description": "Estimated effort (in seconds) for this task"
            },
            "watchers": {
               "type": "object",
               "description": "List of watchers of this task",
               "$ref": "#/definitions/TaskWatchersType"
            }
         },
         "required": [
            "name",
            "phase_type",
            "owner_id"
         ],
         "example": {
            "name": "Analysis and Design",
            "description": "Analyse on the technical feasibility and work on design spec",
            "phase_type": "TODO",
            "owner_id": "d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
            "status": "IN PROGRESS",
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "original_effort": 10800,
            "logged_effort": 7200,
            "remaining_effort": 3600,
            "watchers": [
               "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
               "8d174a35-ca31-35a8-87b4-f06ffc9d5f8d"
            ]
         }
      },
      "CreateBoardTaskResponse": {
         "type": "object",
         "properties": {
            "id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board task in a standard UUID format"
            },
            "status": {
               "$ref": "#/definitions/TaskStatusType"
            }
         },
         "required": [
            "id",
            "status"
         ],
         "example": {
            "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
            "status": "IN PROGRESS"
         }
      },
      "UpdateBoardTaskRequest": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string",
               "description": "Modified name of the task"
            },
            "description": {
               "type": "string",
               "description": "Modified description of the task"
            },
            "owner_id": {
               "type": "string",
               "format": "uuid",
               "description": "Unique identifier of the board task owner in a standard UUID format"
            },
            "start_date": {
               "description": "Start date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "end_date": {
               "description": "End date of the board",
               "$ref": "#/definitions/FullDateType"
            },
            "original_effort": {
               "type": "integer",
               "description": "Estimated effort (in seconds) for this task"
            }
         },
         "example": {
            "name": "Analysis and Design",
            "description": "Analyse on the technical feasibility and work on design spec",
            "owner_id": "d274a25-ca31-45a8-85b4-b06ffc9d5f8f",
            "start_date": "2018-05-07T00:00:00.000Z",
            "end_date": "2018-05-10T00:00:00.000Z",
            "original_effort": 10800
         }
      },
      "BoardStatusType": {
         "type": "string",
         "enum": [
            "OPEN",
            "IN PROGRESS",
            "COMPLETED"
         ],
         "description": "Status of the board"
      },
      "MemberIdType": {
         "type": "string",
         "format": "uuid",
         "description": "Unique identifier of the member in a standard UUID format generated by API backend"
      },
      "MemberStatusType": {
         "type": "string",
         "enum": [
            "REGISTERED",
            "ACTIVE",
            "INACTIVE",
            "LOCKED"
         ],
         "description": "Status of the board"
      },
      "FullDateType": {
         "type": "string",
         "format": "full-date",
         "description": "Full date format"
      },
      "TaskStatusType": {
         "type": "string",
         "enum": [
            "OPEN",
            "IN PROGRESS",
            "ON HOLD",
            "COMPLETED",
            "REOPENED",
            "CLOSED"
         ],
         "description": "Status of the task"
      },
      "ErrorResponse": {
         "type": "object",
         "properties": {
            "code": {
               "type": "string",
               "description": "Application specific standard error code"
            },
            "message": {
               "type": "string",
               "description": "Error message stating the reason"
            }
         },
         "required": [
            "code",
            "message"
         ],
         "example": {
            "code": "BRD-001",
            "message": "Board with name already exist"
         }
      }
   }
}