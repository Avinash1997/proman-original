openapi: 3.0.0
info:
  title: Board Management API
  version: 1.0.0
  description: >
    ## API of Board Management Services


    This specification describes the endpoints, request/response model of the Board Management API.
    This API provides REST resources to manage project boards of Proman application.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      https://proman.io/api/v1/boards
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Proman.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Proman reserves the right to add new parameters without further notice (in request and response).
      * Proman reserves the right to add new error codes without further notice. Proman will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Proman reserves the right to enhance enumerations by new values.
      * Proman reserves the right to increase the "maxItem" settings of arrays without further notice.
      
    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    Board Management APIs can only be called by authorized users who has rights with required permissions to manage boards. These APIs can be used to create new board,
    modify an existing board, map team to the board, add members (users) to the board, remove members (users) from the board, map workflow, mark board as completed, .
    The users once mapped to the board will have an access to board and tasks assigned to them.

    ## Release Notes 

    ### 1.0.0

    * Initial version

servers:
  - url: https://proman.io/api/v1/boards
tags:
  - name: 'API#004 Boards'
    description: >-
      All operations marked with 'API#004 Boards' are relevant to board management use case

paths:
  /users:
    post:
      operationId: createBoard
      tags:
        - 'API#004 Boards'
      security:
        - Authorization: []
      summary: Board Management - Create new User
      description: >
        API to create new board in Proman application
      parameters:
        - $ref: '#/components/parameters/ClientId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        description: Request containing new board details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardRequest'
      responses:
        '200':
          description: OK - Board has been created successfully
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBoardResponse'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
        '422':
          description: >-
            UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              schema:
                type: string
              description: Used as correlation id while tracing for the request in the backend

    get:
       operationId: getUsers
       tags:
         - 'API#004 Boards'
       security:
         - Authorization: []
       summary: Board Management - Get all Users
       description: >
         API to get all users of Proman application
       parameters:
         - $ref: '#/components/parameters/ClientId'
         - $ref: '#/components/parameters/Authorization'
         - in: query
           name: offset
           schema:
             type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           schema:
             type: integer
           required: false
           description: query to limit the number of records per fetch
         - in: query
           name: role
           schema:
             type: integer
           required: false
           description: query to filter the results based on specified role
         - in: query
           name: status
           schema:
             type: string
             enum: [REGISTERED, ACTIVE, INACTIVE, LOCKED]
           required: false
           description: query to filter the results based on specified status
       responses:
         '200':
           description: OK - Fetched all users
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/GetUsersResponse'
         '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a
              client error (e.g., malformed request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '403':
            description: >-
              FORBIDDEN - request has not been applied because client application has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '404':
            description: >-
              NOT FOUND - Non existing endpoint
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
         '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
         '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend

  /users/{id}:
     get:
        operationId: getUser
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Get an existing User
        description: >
            API to get an existing user of Proman application
        parameters:
         - $ref: '#/components/parameters/UserId'
         - $ref: '#/components/parameters/ClientId'
         - $ref: '#/components/parameters/Authorization'
        responses:
         '200':
           description: OK - Fetched user details
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/GetUserDetailsResponse'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Non existing endpoint or User with specified identifier is not found
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               schema:
                 type: string
               description: Used as correlation id while tracing for the request in the backend
     put:
        operationId: updateUser
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Update an existing User
        description: >
            API to update an existing user in Proman application
        parameters:
          - $ref: '#/components/parameters/UserId'
          - $ref: '#/components/parameters/ClientId'
          - $ref: '#/components/parameters/Authorization'
        requestBody:
          description: Request containing modified user details
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserRequest'
        responses:
          '200':
            description: OK - User has been updated successfully
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to
              something that is perceived to be a client error (e.g., malformed
              request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '403':
            description: >-
              FORBIDDEN - request has not been applied because client application
              has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition
              that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
     patch:
        operationId: updateUserStatus
        tags:
          - 'API#004 Boards'
        security:
          - Authorization: []
        summary: Board Management - Update status of an existing User
        description: >
            API to update status of an existing user in Proman application
        parameters:
          - $ref: '#/components/parameters/UserId'
          - $ref: '#/components/parameters/ClientId'
          - $ref: '#/components/parameters/Authorization'
        requestBody:
          description: Request containing modified status
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserStatusRequest'
        responses:
          '200':
            description: OK - User status has been updated successfully
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to
              something that is perceived to be a client error (e.g., malformed
              request syntax, mandatory elements are missing)
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '403':
            description: >-
              FORBIDDEN - request has not been applied because client application
              has no permission to perform action
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend
          '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition
              that prevented it from fulfilling the request.
            headers:
              request-id:
                schema:
                  type: string
                description: Used as correlation id while tracing for the request in the backend

components:

  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves
        security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access
        to the bearer of this token.”

        The bearer token is a cryptic string, usually generated by the server in response to a login request. The
        client must send this token in the Authorization header when making requests to protected resources:

        ```
        Authorization: Bearer <token>

        ```

        Similarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).

        Read https://jwt.io/introduction/ for more information on JWT standard.

  parameters:
    ClientId:
      name: client-id
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory request header about the caller of this API. Only an authorized clients are allowed to this API.
    Authorization:
      name: authorization
      schema:
        type: string
      in: header
      required: true
      description: >-
        Mandatory user credentials in bearer http authentication scheme format. Refer to the #/components/securitySchemes
        for more information on this header.
    UserId:
      name: id
      schema:
        type: string
      in: path
      required: true
      description: >-
        Unique identifier of User in a standard UUID format

  schemas:

    GetUsersResponse:
      type: object
      properties:
        totalCount:
          type: integer
          description: total number of users for the specified input
        users:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/GetUserSummaryResponse'
          description: List of users

    GetUserSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user in a standard UUID format
        first_name:
          type: string
          description: First name of the user
        last_name:
          type: string
          description: Last name of the user
        email_address:
          type: string
          description: Email address of the user
        status:
          type: string
          enum: [REGISTERED, ACTIVE, INACTIVE, LOCKED]
          description: Status of the user
        role:
          type: object
          description: Role mapped to the user
          $ref: '#/components/schemas/RoleSummaryResponse'
      required:
        - id
        - first_name
        - last_name
        - email_address
        - status
        - role
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        first_name: Proman
        last_name: Administrator
        email_address: proman.admin@proman.io
        status: ACTIVE
        role:
          id: 100
          name: Administrator

    GetUserDetailsResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user in a standard UUID format
        first_name:
          type: string
          description: First name of the user
        last_name:
          type: string
          description: Last name of the user
        email_address:
          type: string
          description: Email address of the user
        mobile_number:
          type: string
          description: Mobile number of the user
        status:
          type: string
          enum: [REGISTERED, ACTIVE, INACTIVE, LOCKED]
          description: Status of the user
        role:
          type: object
          description: Role to be mapped to the user
          $ref: '#/components/schemas/RoleDetailsResponse'
      required:
        - id
        - first_name
        - last_name
        - email_address
        - status
        - role
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        first_name: Proman
        last_name: Administrator
        email_address: proman.admin@proman.io
        mobile_number: +91 1234567890
        status: ACTIVE
        role:
          id: 100
          name: Administrator
          permissions:
            - id: 121
              name: Create User
            - id: 122
              name: Update User

    RoleSummaryResponse:
      type: object
      properties:
        id:
          type: integer
          description: Role id of the user
        name:
          type: string
          description: Role name of the user
      required:
        - id
        - name

    RoleDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          description: Role id of the user
        name:
          type: string
          description: Role name of the user
        permissions:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/PermissionsResponse'
          description: Permissions assigned to the user
      required:
        - id
        - name
        - permissions

    PermissionsResponse:
      type: object
      properties:
        id:
          type: integer
          description: Permission id of the user
        name:
          type: string
          description: Permission name of the user
      required:
        - id
        - name

    CreateBoardRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the new board
        start_date:
          type: string
          format: date
          description: Start date of the board
        end_date:
          type: string
          format: date
          description: End date of the board
        workflow_id:
          type: string
          description: Workflow reference identifier
      required:
        - name
        - start_date
        - end_date
        - workflow_id
      example:
        name: Build Prototype
        start_date: 1995-09-07
        end_date: proman.admin@proman.io
        workflow_id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f

    RoleRequest:
      type: object
      properties:
        id:
          type: integer
          description: Role id to be mapped to the user
        permissions:
          type: array
          items:
            type: integer
          description: List of permission ids to be mapped to the new user
      required:
        - role_id

    CreateBoardResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier in a standard UUID format generated by API backend
        status:
          type: string
          enum: [REGISTERED, ACTIVE, INACTIVE, LOCKED]
          description: Status of registered user
      required:
        - id
        - status
      example:
        id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
        status: ACTIVE

    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
          description: Modified first name of an existing user
        last_name:
          type: string
          description: Modified last name of an existing user
        email_address:
          type: string
          description: Modified email address of an existing user
        mobile_number:
          type: string
          description: Modified mobile number of an existing user
        role:
          type: object
          description: Modified role of an existing user
          $ref: '#/components/schemas/RoleRequest'
      required:
        - first_name
        - last_name
        - email_address
        - mobile_number
        - role
      example:
        first_name: Proman
        last_name: Administrator
        email_address: proman.admin@proman.io
        mobile_number: +91 1234567890
        role:
          id: 100
          permissions: [121,122,142]

    UpdateUserStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [ACTIVE, INACTIVE, LOCKED]
          description: Status of registered user

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Application specific standard error code
        message:
          type: string
          description: Error message stating the reason
      required:
        - code
        - message
      example:
        code: USR-001
        message: Email address already exists